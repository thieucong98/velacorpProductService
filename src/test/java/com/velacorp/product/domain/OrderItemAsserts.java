package com.velacorp.product.domain;

import static com.velacorp.product.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class OrderItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderItemAllPropertiesEquals(OrderItem expected, OrderItem actual) {
        assertOrderItemAutoGeneratedPropertiesEquals(expected, actual);
        assertOrderItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderItemAllUpdatablePropertiesEquals(OrderItem expected, OrderItem actual) {
        assertOrderItemUpdatableFieldsEquals(expected, actual);
        assertOrderItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderItemAutoGeneratedPropertiesEquals(OrderItem expected, OrderItem actual) {
        assertThat(expected)
            .as("Verify OrderItem auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderItemUpdatableFieldsEquals(OrderItem expected, OrderItem actual) {
        assertThat(expected)
            .as("Verify OrderItem relevant properties")
            .satisfies(e -> assertThat(e.getProductId()).as("check productId").isEqualTo(actual.getProductId()))
            .satisfies(e -> assertThat(e.getProductName()).as("check productName").isEqualTo(actual.getProductName()))
            .satisfies(e -> assertThat(e.getQuantity()).as("check quantity").isEqualTo(actual.getQuantity()))
            .satisfies(
                e ->
                    assertThat(e.getProductPrice())
                        .as("check productPrice")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getProductPrice())
            )
            .satisfies(e -> assertThat(e.getNote()).as("check note").isEqualTo(actual.getNote()))
            .satisfies(
                e ->
                    assertThat(e.getDiscountAmount())
                        .as("check discountAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getDiscountAmount())
            )
            .satisfies(
                e ->
                    assertThat(e.getTaxAmount()).as("check taxAmount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getTaxAmount())
            )
            .satisfies(
                e ->
                    assertThat(e.getTaxPercent())
                        .as("check taxPercent")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTaxPercent())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderItemUpdatableRelationshipsEquals(OrderItem expected, OrderItem actual) {
        assertThat(expected)
            .as("Verify OrderItem relationships")
            .satisfies(e -> assertThat(e.getOrder()).as("check order").isEqualTo(actual.getOrder()));
    }
}
