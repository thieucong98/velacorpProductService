package com.velacorp.product.domain;

import static com.velacorp.product.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class OrderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderAllPropertiesEquals(Order expected, Order actual) {
        assertOrderAutoGeneratedPropertiesEquals(expected, actual);
        assertOrderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderAllUpdatablePropertiesEquals(Order expected, Order actual) {
        assertOrderUpdatableFieldsEquals(expected, actual);
        assertOrderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderAutoGeneratedPropertiesEquals(Order expected, Order actual) {
        assertThat(expected)
            .as("Verify Order auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderUpdatableFieldsEquals(Order expected, Order actual) {
        assertThat(expected)
            .as("Verify Order relevant properties")
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getShippingAddressId()).as("check shippingAddressId").isEqualTo(actual.getShippingAddressId()))
            .satisfies(e -> assertThat(e.getBillingAddressId()).as("check billingAddressId").isEqualTo(actual.getBillingAddressId()))
            .satisfies(e -> assertThat(e.getNote()).as("check note").isEqualTo(actual.getNote()))
            .satisfies(e -> assertThat(e.getTax()).as("check tax").isEqualTo(actual.getTax()))
            .satisfies(e -> assertThat(e.getDiscount()).as("check discount").isEqualTo(actual.getDiscount()))
            .satisfies(e -> assertThat(e.getNumberItem()).as("check numberItem").isEqualTo(actual.getNumberItem()))
            .satisfies(e -> assertThat(e.getCouponCode()).as("check couponCode").isEqualTo(actual.getCouponCode()))
            .satisfies(
                e ->
                    assertThat(e.getTotalPrice())
                        .as("check totalPrice")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalPrice())
            )
            .satisfies(
                e ->
                    assertThat(e.getDeliveryFee())
                        .as("check deliveryFee")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getDeliveryFee())
            )
            .satisfies(e -> assertThat(e.getOrderStatus()).as("check orderStatus").isEqualTo(actual.getOrderStatus()))
            .satisfies(e -> assertThat(e.getDeliveryMethod()).as("check deliveryMethod").isEqualTo(actual.getDeliveryMethod()))
            .satisfies(e -> assertThat(e.getDeliveryStatus()).as("check deliveryStatus").isEqualTo(actual.getDeliveryStatus()))
            .satisfies(e -> assertThat(e.getPaymentStatus()).as("check paymentStatus").isEqualTo(actual.getPaymentStatus()))
            .satisfies(e -> assertThat(e.getPaymentId()).as("check paymentId").isEqualTo(actual.getPaymentId()))
            .satisfies(e -> assertThat(e.getCheckoutId()).as("check checkoutId").isEqualTo(actual.getCheckoutId()))
            .satisfies(e -> assertThat(e.getRejectReason()).as("check rejectReason").isEqualTo(actual.getRejectReason()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderUpdatableRelationshipsEquals(Order expected, Order actual) {}
}
